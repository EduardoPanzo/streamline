// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String   @id  @unique  @default(uuid())
  email      String   @unique
  name       String  
  password   String
  avatarImg String?
  
  Project  Project[]
  AdminProject  AdminProject[]
  MemberProject MemberProject[]
  HolderTask HolderTask[]

  @@map("user")
}

model Project {
  id          String   @id      @unique @default(uuid())
  name        String
  description String
  color       String  @default("#1237bc")
  createdAt  DateTime? @default(now())

  Task Task[]
  AdminProject  AdminProject[]
  MemberProject MemberProject[]

  User User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("project")
}

model Task {
  id           String @id @unique @default(uuid())
  name         String
  description  String
  color        String  @default("#1237bc")
  status       String  @default("todo")//todo;  process;  stoped; done
  createdAt   DateTime? @default(now())

  HolderTask HolderTask[]

  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@map("task")
}

model AdminProject {
  id  String  @id @default(uuid())

  userId String
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("adminProject")
}

model MemberProject {
  id String @id @default(uuid())

  userId String
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("memberProject")
}

model HolderTask {
  id String @id @default(uuid())

  userId String
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId String
  Task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("holderTask")
}